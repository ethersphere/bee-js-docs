[{"title":"bee-js: Ethereum Swarm JavaScript API","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"Development","type":1,"pageTitle":"bee-js: Ethereum Swarm JavaScript API","url":"docs/##","content":"We'd love you to join us! Are you up to the challenge of helping us to create bee-js and the other incredible technologies we're building? Have alook at our Github - Ethersphere. "},{"title":"Community","type":1,"pageTitle":"bee-js: Ethereum Swarm JavaScript API","url":"docs/##","content":"There is a vibrant and buzzing community behind Swarm, get involved in one of our group channels. Swarm.Beehive Chat on Mattermost.Orange Lounge.Twitter @ethswarm.reddit channel. "},{"title":"Reporting a bug","type":1,"pageTitle":"bee-js: Ethereum Swarm JavaScript API","url":"docs/##","content":"If anything isn't working, get in touch and let us know! Every Bee is important to us and we'll get right to work on fixing it for you as soon as possible. üêù "},{"title":"API and Debug API Overview","type":0,"sectionRef":"#","url":"docs/api-reference","content":"","keywords":""},{"title":"Classes","type":1,"pageTitle":"API and Debug API Overview","url":"docs/api-reference##","content":"BeeBeeDebug "},{"title":"default","type":1,"pageTitle":"API and Debug API Overview","url":"docs/api-reference##","content":"Renames and exports: Bee "},{"title":"Class: BeeDebug","type":0,"sectionRef":"#","url":"docs/api-reference/classes/beedebug","content":"","keywords":""},{"title":"Hierarchy","type":1,"pageTitle":"Class: BeeDebug","url":"docs/api-reference/classes/beedebug##","content":"BeeDebug "},{"title":"Table of contents","type":1,"pageTitle":"Class: BeeDebug","url":"docs/api-reference/classes/beedebug##","content":""},{"title":"Constructors","type":1,"pageTitle":"Class: BeeDebug","url":"docs/api-reference/classes/beedebug##","content":"constructor "},{"title":"Properties","type":1,"pageTitle":"Class: BeeDebug","url":"docs/api-reference/classes/beedebug##","content":"url "},{"title":"Methods","type":1,"pageTitle":"Class: BeeDebug","url":"docs/api-reference/classes/beedebug##","content":"getOverlayAddressgetPssPublicKey "},{"title":"Constructors","type":1,"pageTitle":"Class: BeeDebug","url":"docs/api-reference/classes/beedebug##","content":""},{"title":"constructor","type":1,"pageTitle":"Class: BeeDebug","url":"docs/api-reference/classes/beedebug##","content":"+ new BeeDebug(url: string): BeeDebug Parameters: Name\tTypeurl\tstring Returns: BeeDebug Defined in: index.ts:342 "},{"title":"Properties","type":1,"pageTitle":"Class: BeeDebug","url":"docs/api-reference/classes/beedebug##","content":""},{"title":"url","type":1,"pageTitle":"Class: BeeDebug","url":"docs/api-reference/classes/beedebug##","content":"‚Ä¢ Readonly url: string "},{"title":"Methods","type":1,"pageTitle":"Class: BeeDebug","url":"docs/api-reference/classes/beedebug##","content":""},{"title":"getOverlayAddress","type":1,"pageTitle":"Class: BeeDebug","url":"docs/api-reference/classes/beedebug##","content":"‚ñ∏ getOverlayAddress(): Promise<string> Returns: Promise<string> Defined in: index.ts:345  "},{"title":"getPssPublicKey","type":1,"pageTitle":"Class: BeeDebug","url":"docs/api-reference/classes/beedebug##","content":"‚ñ∏ getPssPublicKey(): Promise<string> Returns: Promise<string> Defined in: index.ts:351 "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/getting-started","content":"First you need to get bee-js into your project. This can be done using your favourite package management tool or directly: npmyarnscript tag npm install @ethersphere/bee-js --save After that you need to import the Bee class and create a bee instance connecting to your Bee node (here we assume it runs on localhost on default port). TypeScriptJavaScript import { Bee } from \"@ethersphere/bee-js\" const bee = new Bee('http://localhost:1633') That‚Äôs it! now you can use the bee object. Run your own Bee node You can find out more about running Bee node in the Bee docs","keywords":""},{"title":"Track Upload Status","type":0,"sectionRef":"#","url":"docs/track-upload","content":"","keywords":""},{"title":"What is a tag","type":1,"pageTitle":"Track Upload Status","url":"docs/track-upload##","content":"The status of your upload can be followed by using tags. A tag is a label given to all chunks that belong to the same upload instruction. In the bee-js library, tag looks as follows: interface Tag { total: number // total number of chunks belonging to a tag split: number // number of chunks already processed by splitter for hashing seen: number // number of chunks already seen stored: number // number of chunks already stored locally sent: number // number of chunks sent for push syncing synced: number // number of chunks synced with proof uid: number // a unique identifier for this tag address: string // the associated swarm hash for this tag startedAt: string // when the tag was first used }  "},{"title":"Create tag","type":1,"pageTitle":"Track Upload Status","url":"docs/track-upload##","content":"Creating a tag is easy. Just use the createTag function. TypeScriptJavaScript const tag = await bee.createTag()  "},{"title":"Upload with tag","type":1,"pageTitle":"Track Upload Status","url":"docs/track-upload##","content":"You can then use the tag when uploading data, by providing it in the options arguments for each of these methods. TypeScriptJavaScript await bee.uploadData(\"Bee is awesome!\", { tag }) // OR await bee.uploadFile(file, \"foo.txt\", { tag }) // OR await bee.uploadFiles(files, { tag }) // OR await bee.uploadFilesToCollection(\"./\", true, { tag })  "},{"title":"Retrieve tag","type":1,"pageTitle":"Track Upload Status","url":"docs/track-upload##","content":"Each time you want to check the upload status, you can use the retrieveTag function TypeScriptJavaScript const updatedTag = await bee.retrieveTag(tag) // OR const updatedTag = await bee.retrieveTag(tag.uid)  "},{"title":"Class: Bee","type":0,"sectionRef":"#","url":"docs/api-reference/classes/bee","content":"","keywords":""},{"title":"Hierarchy","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"Bee "},{"title":"Table of contents","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":""},{"title":"Constructors","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"constructor "},{"title":"Properties","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"url "},{"title":"Methods","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"createTagdownloadDatadownloadFiledownloadFileFromCollectiondownloadReadableDatadownloadReadableFiledownloadReadableFileFromCollectionpinCollectionpinDatapinFilepssReceivepssSendpssSubscriberetrieveTagunpinCollectionunpinDataunpinFileuploadDatauploadFileuploadFilesuploadFilesFromDirectory "},{"title":"Constructors","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":""},{"title":"constructor","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"+ new Bee(url: string): Bee Parameters: Name\tTypeurl\tstring Returns: Bee Defined in: index.ts:29 "},{"title":"Properties","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":""},{"title":"url","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚Ä¢ Readonly url: string "},{"title":"Methods","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":""},{"title":"createTag","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ createTag(): Promise<Tag> Create new tag Returns: Promise<Tag> Defined in: index.ts:161  "},{"title":"downloadData","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ downloadData(reference: string): Promise<Uint8Array> Download data as a byte array Parameters: Name\tType\tDescriptionreference\tstring\tBee data reference Returns: Promise<Uint8Array> Defined in: index.ts:49  "},{"title":"downloadFile","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ downloadFile(reference: string): Promise<FileData<Uint8Array>> Download single file as a byte array Parameters: Name\tType\tDescriptionreference\tstring\tBee file reference Returns: Promise<FileData<Uint8Array>> Defined in: index.ts:84  "},{"title":"downloadFileFromCollection","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ downloadFileFromCollection(reference: string, path?: string): Promise<FileData<Uint8Array>> Download single file as a byte array from collection given using the path Parameters: Name\tType\tDefault value\tDescriptionreference\tstring\t-\tBee collection reference path\tstring\t''\tPath of the requested file in the collection Returns: Promise<FileData<Uint8Array>> file in byte array with metadata Defined in: index.ts:142  "},{"title":"downloadReadableData","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ downloadReadableData(reference: string): Promise<Readable> Download data as a readable stream Parameters: Name\tType\tDescriptionreference\tstring\tBee data reference Returns: Promise<Readable> Defined in: index.ts:58  "},{"title":"downloadReadableFile","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ downloadReadableFile(reference: string): Promise<FileData<Readable>> Download single file as a readable stream Parameters: Name\tType\tDescriptionreference\tstring\tBee file reference Returns: Promise<FileData<Readable>> Defined in: index.ts:93  "},{"title":"downloadReadableFileFromCollection","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ downloadReadableFileFromCollection(reference: string, path?: string): Promise<FileData<Readable>> Download single file as a readable stream from collection given using the path Parameters: Name\tType\tDefault value\tDescriptionreference\tstring\t-\tBee collection reference path\tstring\t''\tPath of the requested file in the collection Returns: Promise<FileData<Readable>> file in readable stream with metadata Defined in: index.ts:154  "},{"title":"pinCollection","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ pinCollection(reference: string): Promise<BeeResponse> Pin collection with given reference Parameters: Name\tType\tDescriptionreference\tstring\tBee collection reference Returns: Promise<BeeResponse> Defined in: index.ts:197  "},{"title":"pinData","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ pinData(reference: string): Promise<BeeResponse> Pin data with given reference Parameters: Name\tType\tDescriptionreference\tstring\tBee data reference Returns: Promise<BeeResponse> Defined in: index.ts:215  "},{"title":"pinFile","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ pinFile(reference: string): Promise<BeeResponse> Pin file with given reference Parameters: Name\tType\tDescriptionreference\tstring\tBee file reference Returns: Promise<BeeResponse> Defined in: index.ts:179  "},{"title":"pssReceive","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ pssReceive(topic: string, timeoutMsec?: number): Promise<Uint8Array> Receive message with Postal Service for Swarm Because sending a PSS message is slow and CPU intensive, it is not supposed to be used for general messaging but most likely for setting up an encrypted communication channel by sending a one-off message. This is a helper function to wait for exactly one message to arrive and then cancel the subscription. Additionally a timeout can be provided for the message to arrive or else an error will be thrown. Parameters: Name\tType\tDefault value\tDescriptiontopic\tstring\t-\tTopic name timeoutMsec\tnumber\t0\tTimeout in milliseconds Returns: Promise<Uint8Array> Message in byte array Defined in: index.ts:309  "},{"title":"pssSend","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ pssSend(topic: string, target: string, data: string | Uint8Array, recipient?: string): Promise<BeeResponse> Send to recipient or target with Postal Service for Swarm Parameters: Name\tType\tDescriptiontopic\tstring\tTopic name target\tstring\tTarget message address prefix data\tstring | Uint8Array\tMessage to be sent recipient?\tstring\tRecipient public key Returns: Promise<BeeResponse> Defined in: index.ts:237  "},{"title":"pssSubscribe","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ pssSubscribe(topic: string, handler: PssMessageHandler): PssSubscription Subscribe to messages with Postal Service for Swarm Parameters: Name\tType\tDescriptiontopic\tstring\tTopic name handler\tPssMessageHandler\tMessage handler interface Returns: PssSubscription Subscription to a given topic Defined in: index.ts:254  "},{"title":"retrieveTag","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ retrieveTag(tagUid: number | Tag): Promise<Tag> Retrieve tag information from Bee node Parameters: Name\tTypetagUid\tnumber | Tag Returns: Promise<Tag> Defined in: index.ts:170  "},{"title":"unpinCollection","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ unpinCollection(reference: string): Promise<BeeResponse> Unpin collection with given reference Parameters: Name\tType\tDescriptionreference\tstring\tBee collection reference Returns: Promise<BeeResponse> Defined in: index.ts:206  "},{"title":"unpinData","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ unpinData(reference: string): Promise<BeeResponse> Unpin data with given reference Parameters: Name\tType\tDescriptionreference\tstring\tBee data reference Returns: Promise<BeeResponse> Defined in: index.ts:224  "},{"title":"unpinFile","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ unpinFile(reference: string): Promise<BeeResponse> Unpin file with given reference Parameters: Name\tType\tDescriptionreference\tstring\tBee file reference Returns: Promise<BeeResponse> Defined in: index.ts:188  "},{"title":"uploadData","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ uploadData(data: string | Uint8Array, options?: UploadOptions): Promise<string> Upload data to a Bee node Parameters: Name\tType\tDescriptiondata\tstring | Uint8Array\tData to be uploaded options?\tUploadOptions\tAditional options like tag, encryption, pinning, content-type Returns: Promise<string> reference is a content hash of the data Defined in: index.ts:40  "},{"title":"uploadFile","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ uploadFile(data: string | Uint8Array | Readable, name?: string, options?: FileUploadOptions): Promise<string> Upload single file to a Bee node Parameters: Name\tType\tDescriptiondata\tstring | Uint8Array | Readable\tData to be uploaded name?\tstring\tName of the uploaded file options?\tFileUploadOptions\tAditional options like tag, encryption, pinning, content-type Returns: Promise<string> reference is a content hash of the file Defined in: index.ts:71  "},{"title":"uploadFiles","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ uploadFiles(fileList: FileList | File[], options?: CollectionUploadOptions): Promise<string> Upload collection of files to a Bee node Uses the FileList API from the browser. Parameters: Name\tType\tDescriptionfileList\tFileList | File[]\tlist of files to be uploaded options?\tCollectionUploadOptions\tAdditional options like tag, encryption, pinning Returns: Promise<string> reference of the collection of files Defined in: index.ts:107  "},{"title":"uploadFilesFromDirectory","type":1,"pageTitle":"Class: Bee","url":"docs/api-reference/classes/bee##","content":"‚ñ∏ uploadFilesFromDirectory(dir: string, recursive?: boolean, options?: CollectionUploadOptions): Promise<string> Upload collection of files to a Bee node Uses the fs module of Node.js Parameters: Name\tType\tDefault value\tDescriptiondir\tstring\t-\tthe path of the files to be uploaded recursive\tboolean\ttrue\tspecifies if the directory should be recursively uploaded options?\tCollectionUploadOptions\t-\tAdditional options like tag, encryption, pinning Returns: Promise<string> reference of the collection of files Defined in: index.ts:124 "}]