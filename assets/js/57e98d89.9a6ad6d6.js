"use strict";(self.webpackChunkbee_js_docs=self.webpackChunkbee_js_docs||[]).push([[900],{653:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var o=t(8168),a=(t(6540),t(5680));const s={title:"Checking Node Status",id:"status",slug:"/status",sidebar_label:"Checking Node Status"},r=void 0,l={unversionedId:"documentation/status",id:"documentation/status",title:"Checking Node Status",description:"To understand and monitor the status of your Bee node, bee-js provides a set of helpful methods. In this guide, we'll walk through how to retrieve and log the data needed to give a complete overview of your node's current status.",source:"@site/docs/documentation/status.md",sourceDirName:"documentation",slug:"/status",permalink:"/docs/status",draft:!1,editUrl:"https://github.com/ethersphere/bee-js-docs/docs/documentation/status.md",tags:[],version:"current",frontMatter:{title:"Checking Node Status",id:"status",slug:"/status",sidebar_label:"Checking Node Status"},sidebar:"Balls",previous:{title:"SDK Overview",permalink:"/docs/overview"},next:{title:"Chequebook and Cheques",permalink:"/docs/chequebook"}},i={},c=[{value:"Requirements",id:"requirements",level:3},{value:"1. Node Health and Readiness",id:"1-node-health-and-readiness",level:3},{value:"2. Get Node Topology",id:"2-get-node-topology",level:3},{value:"3. Get Node Addresses",id:"3-get-node-addresses",level:3},{value:"4. Get Version and API Compatibility",id:"4-get-version-and-api-compatibility",level:3},{value:"5. Get Node Info",id:"5-get-node-info",level:3},{value:"6. Get Chain State",id:"6-get-chain-state",level:3},{value:"7. Get Reserve State",id:"7-get-reserve-state",level:3},{value:"Run All Checks Together",id:"run-all-checks-together",level:3}],d={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,o.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"To understand and monitor the status of your Bee node, ",(0,a.yg)("inlineCode",{parentName:"p"},"bee-js")," provides a set of helpful methods. In this guide, we'll walk through how to retrieve and log the data needed to give a complete overview of your node's current status."),(0,a.yg)("h3",{id:"requirements"},"Requirements"),(0,a.yg)("p",null,"To use the example scripts below, you need:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"An instance of the ",(0,a.yg)("inlineCode",{parentName:"li"},"Bee")," class from ",(0,a.yg)("inlineCode",{parentName:"li"},"bee-js")," ",(0,a.yg)("a",{parentName:"li",href:"/docs/getting-started/"},"initialized")," using the API endpoint of a currently operating Bee node. ")),(0,a.yg)("h3",{id:"1-node-health-and-readiness"},"1. Node Health and Readiness"),(0,a.yg)("p",null,"Use this to access the health and readiness endpoint return values used for container orchestration tools like Kubernetes. "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function checkHealthAndReadiness() {\n  const health = await bee.getHealth()\n  const readiness = await bee.getReadiness()\n\n  console.log('Health:', health)\n  console.log('Readiness:', readiness)\n}\n\ncheckHealthAndReadiness()\n")),(0,a.yg)("p",null,"Output:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"Health: { apiVersion: '7.3.0', version: '2.5.0-5ec231ba', status: 'ok' }\nReadiness: { apiVersion: '7.3.0', version: '2.5.0-5ec231ba', status: 'ready' }\n")),(0,a.yg)("h3",{id:"2-get-node-topology"},"2. Get Node Topology"),(0,a.yg)("p",null,"Use this to inspect how many peers you're connected to, and the state of your neighborhood."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function checkTopology() {\n  const topology = await bee.getTopology()\n\n  console.log('Topology:', topology)\n}\n\ncheckTopology()\n")),(0,a.yg)("p",null,"Output: ",(0,a.yg)("em",{parentName:"p"},"(Bins 1 - 30 omitted from ",(0,a.yg)("inlineCode",{parentName:"em"},"bins")," result)")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"Topology: {\n  baseAddr: '1e2054bec3e681aeb0b365a1f9a574a03782176bd3ec0bcf810ebcaf551e4070',\n  population: 5619,\n  connected: 135,\n  timestamp: '2025-03-26T07:54:05.921263981Z',\n  nnLowWatermark: 3,\n  depth: 10,\n  reachability: 'Public',\n  networkAvailability: 'Available',\n  bins: {\n    bin_0: {\n      population: 2714,\n      connected: 16,\n      connectedPeers: [Array],\n      disconnectedPeers: [Array]\n    },\n    ...\n    bin_31: {\n      population: 0,\n      connected: 0,\n      connectedPeers: [],\n      disconnectedPeers: []\n    }\n  }\n}\n")),(0,a.yg)("h3",{id:"3-get-node-addresses"},"3. Get Node Addresses"),(0,a.yg)("p",null,"This will give you the overlay address, underlay addresses, and Ethereum address associated with your Bee node (the address is an Ethereum style address however it is for a Gnosis Chain account, not mainnet Ethereum)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function checkAddresses() {\n  const addresses = await bee.getNodeAddresses()\n\n  console.log('Node Addresses:', addresses)\n}\n\ncheckAddresses()\n")),(0,a.yg)("p",null,"Output:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"Node Addresses:\nOverlay: 1e2054bec3e681aeb0b365a1f9a574a03782176bd3ec0bcf810ebcaf551e4070\nEthereum: 9a73f283cd9211b96b5ec63f7a81a0ddc847cd93\nPublic Key: 7d0c4759f689ea3dd3eb79222870671c492cb99f3fade275bcbf0ea39cd0ef6e25edd43c99985983e49aa528f3f2b6711085354a31acb4e7b03559b02ec868f0\nPSS Public Key: 5ade58d20be7e04ee8f875eabeebf9c53375a8fc73917683155c7c0b572f47ef790daa3328f48482663954d12f6e4739f748572c1e86bfa89af99f17e7dd4d33\nUnderlay: [\n  '/ip4/127.0.0.1/tcp/1634/p2p/QmcpSJPHuuQYRgDkNfwziihVcpuVteoNxePvfzaJyp9z7j',\n  '/ip4/172.17.0.2/tcp/1634/p2p/QmcpSJPHuuQYRgDkNfwziihVcpuVteoNxePvfzaJyp9z7j',\n  '/ip6/::1/tcp/1634/p2p/QmcpSJPHuuQYRgDkNfwziihVcpuVteoNxePvfzaJyp9z7j'\n]\n")),(0,a.yg)("h3",{id:"4-get-version-and-api-compatibility"},"4. Get Version and API Compatibility"),(0,a.yg)("p",null,"Use these methods to check your node's version number and the API version number, and to check whether the API version is supported by ",(0,a.yg)("inlineCode",{parentName:"p"},"bee-js"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function checkVersions() {\n  const versions = await bee.getVersions()\n  const isSupported = await bee.isSupportedApiVersion()\n\n  console.log('Node Versions:', versions)\n  console.log('Is Supported API Version:', isSupported)\n}\n\ncheckVersions()\n")),(0,a.yg)("p",null,"Output:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"Node Versions: {\n  supportedBeeVersion: '2.4.0-390a402e',\n  supportedBeeApiVersion: '7.2.0',\n  beeVersion: '2.5.0-5ec231ba',\n  beeApiVersion: '7.3.0'\n}\nIs Supported API Version: true\n")),(0,a.yg)("h3",{id:"5-get-node-info"},"5. Get Node Info"),(0,a.yg)("p",null,"This provides general information such as node mode (e.g., full, light), and whether chequebook and SWAP are enabled."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function getNodeInfo() {\n  const info = await bee.getNodeInfo()\n\n  console.log('Node Info:', info)\n}\n\ngetNodeInfo()\n")),(0,a.yg)("p",null,"Output:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"Node Info: { beeMode: 'light', chequebookEnabled: true, swapEnabled: true } \n")),(0,a.yg)("h3",{id:"6-get-chain-state"},"6. Get Chain State"),(0,a.yg)("p",null,"Shows blockchain-related info such as the current price for storage. "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function getChainState() {\n  const state = await bee.getChainState()\n\n  console.log('Chain State:', state)\n}\n\ngetChainState()\n")),(0,a.yg)("p",null,"Output:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"Chain State: {\n  block: 39230575,\n  chainTip: 39230580,\n  totalAmount: '204168626286',\n  currentPrice: 41699\n}\n")),(0,a.yg)("h3",{id:"7-get-reserve-state"},"7. Get Reserve State"),(0,a.yg)("p",null,"This tells you about your node\u2019s local reserve size and storage metrics."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function getReserveState() {\n  const reserveState = await bee.getReserveState()\n\n  console.log('Reserve State:', reserveState)\n}\n\ngetReserveState()\n")),(0,a.yg)("p",null,"Output:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"Reserve State: { commitment: 17360879616, radius: 13, storageRadius: 0 }\n")),(0,a.yg)("h3",{id:"run-all-checks-together"},"Run All Checks Together"),(0,a.yg)("p",null,"You can combine all of the above into one function to quickly inspect the full status of your node:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import { Bee, Bytes } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function checkHealthAndReadiness() {\n  const health = await bee.getHealth()\n  const readiness = await bee.getReadiness()\n\n  console.log('Health:', health)\n  console.log('Readiness:', readiness)\n}\n\nasync function checkTopology() {\n  const topology = await bee.getTopology()\n\n  console.log('Topology:', topology)\n}\n\nasync function checkAddresses() {\n  const addresses = await bee.getNodeAddresses()\n\n  console.log('Node Addresses:')\n  console.log('Overlay:', new Bytes(addresses.overlay.bytes).toHex())\n  console.log('Ethereum:', new Bytes(addresses.ethereum.bytes).toHex())\n  console.log('Public Key:', new Bytes(addresses.publicKey.bytes).toHex())\n  console.log('PSS Public Key:', new Bytes(addresses.pssPublicKey.bytes).toHex())\n  console.log('Underlay:', addresses.underlay)\n}\n\nasync function checkVersions() {\n  const versions = await bee.getVersions()\n  const isSupported = await bee.isSupportedApiVersion()\n\n  console.log('Node Versions:', versions)\n  console.log('Is Supported API Version:', isSupported)\n}\n\nasync function getNodeInfo() {\n  const info = await bee.getNodeInfo()\n\n  console.log('Node Info:', info)\n}\n\nasync function getChainState() {\n  const state = await bee.getChainState()\n\n  console.log('Chain State:', state)\n}\n\nasync function getReserveState() {\n  const reserveState = await bee.getReserveState()\n\n  console.log('Reserve State:', reserveState)\n}\n\nasync function checkNodeStatus() {\n  console.log('\\n\\n=== Node Health and Readiness ===')\n  await checkHealthAndReadiness()\n\n  console.log('\\n\\n=== Node Topology ===')\n  await checkTopology()\n\n  console.log('\\n\\n=== Node Addresses ===')\n  await checkAddresses()\n\n  console.log('\\n\\n=== Version and API Compatibility ===')\n  await checkVersions()\n\n  console.log('\\n\\n=== Node Info ===')\n  await getNodeInfo()\n\n  console.log('\\n\\n=== Chain State ===')\n  await getChainState()\n\n  console.log('\\n\\n=== Reserve State ===')\n  await getReserveState()\n}\n\ncheckNodeStatus()\n")))}p.isMDXComponent=!0},5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>h});var o=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=o.createContext({}),c=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return o.createElement(i.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),g=a,h=u["".concat(i,".").concat(g)]||u[g]||p[g]||s;return t?o.createElement(h,r(r({ref:n},d),{},{components:t})):o.createElement(h,r({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,r=new Array(s);r[0]=g;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[u]="string"==typeof e?e:a,r[1]=l;for(var c=2;c<s;c++)r[c]=t[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"}}]);