"use strict";(self.webpackChunkbee_js_docs=self.webpackChunkbee_js_docs||[]).push([[688],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},9929:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"documentation/act","title":"ACT (Access Control Trie)","description":"ACT, or Access Control Trie, is a decentralized permission system built into the Swarm network that allows you to restrict access to uploaded content.","source":"@site/docs/documentation/act.md","sourceDirName":"documentation","slug":"/act","permalink":"/docs/act","draft":false,"unlisted":false,"editUrl":"https://github.com/ethersphere/bee-js-docs/docs/documentation/act.md","tags":[],"version":"current","frontMatter":{"title":"ACT (Access Control Trie)","id":"act","slug":"/act","sidebar_label":"ACT"},"sidebar":"Balls","previous":{"title":"SOC and Feeds","permalink":"/docs/soc-and-feeds"},"next":{"title":"Utility Classes","permalink":"/docs/utilities"}}');var r=t(4848),a=t(8453);const i={title:"ACT (Access Control Trie)",id:"act",slug:"/act",sidebar_label:"ACT"},c=void 0,o={},l=[{value:"Requirements",id:"requirements",level:2},{value:"Create Grantees List",id:"create-grantees-list",level:2},{value:"Example Script:",id:"example-script",level:4},{value:"Update Grantees List",id:"update-grantees-list",level:2},{value:"Example Script:",id:"example-script-1",level:4},{value:"Get Grantees List",id:"get-grantees-list",level:2},{value:"Example Script:",id:"example-script-2",level:4},{value:"Upload With ACT",id:"upload-with-act",level:2},{value:"Example Script:",id:"example-script-3",level:4},{value:"Download With ACT",id:"download-with-act",level:2},{value:"Example Script:",id:"example-script-4",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"ACT, or Access Control Trie, is a decentralized permission system built into the Swarm network that allows you to restrict access to uploaded content."}),"\n",(0,r.jsx)(n.p,{children:"When you upload data to Swarm using ACT, only the original uploader and users with public keys listed in an associated grantee list are able to retrieve and decrypt that data. The grantee list is published separately and cryptographically referenced during upload and download operations."}),"\n",(0,r.jsx)(n.p,{children:"ACT is ideal for use cases such as the serialized release of content like a podcast or newsletter where the publisher wishes to limit access to subscribers only."}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsxs)(n.p,{children:["Once a file is uploaded with ACT, any node whose public key is on the ACT grantees list referenced during the upload ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"will have permanent access to that file"})})," as long as the file reference and history reference returned from the upload has been shared with them."]}),(0,r.jsxs)(n.p,{children:["Updating the grantees list to remove a public key ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"will not revoke access"})})," to the content retroactively."]}),(0,r.jsxs)(n.p,{children:["Likewise, re-uploading the content using the new grantees list will also ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"not retroactively revoke access"})})," to the content."]})]}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsx)(n.p,{children:"The use of ACT requires the following:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A Bee light node running on with synced postage batch data. (Running at ",(0,r.jsx)(n.code,{children:"http://localhost:1633"})," by default)"]}),"\n",(0,r.jsxs)(n.li,{children:["A valid postage batch ID. ",(0,r.jsx)(n.a,{href:"/docs/storage/#purchasing-storage",children:"Buy one"})," if needed."]}),"\n",(0,r.jsx)(n.li,{children:"Public keys of the nodes you want to grant access to."}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"public key of the publishing node"}),". This can be obtained using the ",(0,r.jsxs)(n.a,{href:"/docs/status/#3-get-node-addresses",children:[(0,r.jsx)(n.code,{children:"bee.getNodeAddresses()"})," method"]}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"create-grantees-list",children:"Create Grantees List"}),"\n",(0,r.jsx)(n.p,{children:"First we create a grantees list with the public keys of anyone we want to grant access to."}),"\n",(0,r.jsx)(n.h4,{id:"example-script",children:"Example Script:"}),"\n",(0,r.jsx)(n.p,{children:"The example script below performs the following key operations:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Initializes a Bee client."}),"\n",(0,r.jsx)(n.li,{children:"Defines a list of grantee public keys."}),"\n",(0,r.jsx)(n.li,{children:"Specifies a valid postage batch ID."}),"\n",(0,r.jsxs)(n.li,{children:["Calls ",(0,r.jsx)(n.code,{children:"bee.createGrantees()"})," to create a new grantee list."]}),"\n",(0,r.jsxs)(n.li,{children:["Logs the resulting ",(0,r.jsx)(n.code,{children:"ref"})," and ",(0,r.jsx)(n.code,{children:"historyref"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Bee, PublicKey, BatchId } from '@ethersphere/bee-js';\n\n// Initialize Bee instance\nconst bee = new Bee('http://localhost:1633');\n\n// Grantee's public key (replace with the actual key(s) of the node(s) you wish to grant access to)\nconst grantees = [\n  new PublicKey('027d0c4759f689ea3dd3eb79222870671c492cb99f3fade275bcbf0ea39cd0ef6e'),\n];\n\n// Your postage batch ID (replace with your own valid postage batch ID)\nconst postageBatchId = new BatchId('0258a225fe8da54cc6537eb8b12fcf6706c7873dbe19b9381d31729aa0405398');\n\nasync function createGranteeList() {\n  try {\n    // Create the grantee list using `bee.createGrantees()` method\n    const response = await bee.createGrantees(postageBatchId, grantees);\n\n    // Log the response (ref and history ref)\n    console.log('Grantee List Created Successfully:');\n    console.log('Reference:', response.ref.toHex());\n    console.log('History Reference:', response.historyref.toHex());\n  } catch (error) {\n    console.error('Error creating grantee list:', error);\n  }\n}\n\n// Call the function to create the grantee list\ncreateGranteeList();\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"Grantee List Created Successfully:\nReference: 69da034fdae049eed9a22ec48b98a08ed5d363d48076f88c44ffe3367a18e306cae6aaf1cfce72d59262b9fb9293e15469c01c6a2626bb62478116cc98fb303b\nHistory Reference: 18d6f58a1d3c8253a5fc47023d49e9011236ead43724e595e898e1b422b77b19\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The first 64 byte (128 hex digit) reference ",(0,r.jsx)(n.code,{children:"Grantee List Reference"})," (",(0,r.jsx)(n.code,{children:"ref"}),") is used on its own for reviewing the list contents and updating the list."]}),"\n",(0,r.jsxs)(n.p,{children:["The second reference 32 byte (64 hex digit) ",(0,r.jsx)(n.code,{children:"History Reference"})," (",(0,r.jsx)(n.code,{children:"historyref"}),") is used for uploading with ACT and is also used along with the first ",(0,r.jsx)(n.code,{children:"ref"})," for creating a new updated grantee list based on the original list referred to by the ",(0,r.jsx)(n.code,{children:"ref"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"update-grantees-list",children:"Update Grantees List"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:['Although we refer to this operation as an "update", due to Swarm\'s immutable nature, the original list is not modified by this operation. Rather a new list is created with the specified grantee keys added or removed from the original list. This operation ',(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"DOES NOT"})})," retroactively add or remove access to content uploaded with the original ACT list."]})}),"\n",(0,r.jsxs)(n.p,{children:["To update a grantees list, call the ",(0,r.jsx)(n.code,{children:"bee.patchGrantees()"})," method with the following arguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A valid postage batch ID"}),"\n",(0,r.jsxs)(n.li,{children:["The original list\u2019s ",(0,r.jsx)(n.code,{children:"ref"})," and ",(0,r.jsx)(n.code,{children:"historyref"})]}),"\n",(0,r.jsxs)(n.li,{children:["An object specifying public keys to ",(0,r.jsx)(n.code,{children:"add"})," or ",(0,r.jsx)(n.code,{children:"revoke"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"bee.patchGrantees(postageBatchId, ref, historyref, {\n  add: [grantee1, grantee2],\n  revoke: [],\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Calling this method returns the new list\u2019s updated ",(0,r.jsx)(n.code,{children:"ref"})," and ",(0,r.jsx)(n.code,{children:"historyref"}),", which you should use for future updates or access."]}),"\n",(0,r.jsx)(n.h4,{id:"example-script-1",children:"Example Script:"}),"\n",(0,r.jsx)(n.p,{children:"The example script below performs the following key steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Initializes the Bee client and defines two public keys to add as grantees."}),"\n",(0,r.jsxs)(n.li,{children:["Provides the existing grantee list\u2019s ",(0,r.jsx)(n.code,{children:"ref"})," and ",(0,r.jsx)(n.code,{children:"historyref"}),", and a valid postage batch ID."]}),"\n",(0,r.jsxs)(n.li,{children:["Calls ",(0,r.jsx)(n.code,{children:"bee.patchGrantees()"})," to add the new keys to the list."]}),"\n",(0,r.jsxs)(n.li,{children:["Logs the updated grantee list\u2019s ",(0,r.jsx)(n.code,{children:"ref"})," and ",(0,r.jsx)(n.code,{children:"historyref"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Bee, PublicKey, BatchId, Reference } from '@ethersphere/bee-js';\n\n// Initialize Bee instance\nconst bee = new Bee('http://localhost:1633'); \n\n// Grantee's public key(s) to be added (replace with the actual key)\nconst grantee1 = new PublicKey('027d0c4759f689ea3dd3eb79222870671c492cb99f3fade275bcbf0ea39cd0ef6e');\nconst grantee2 = new PublicKey('03636056d1e08f100c5acaf14d10070102de9444c97b2e8215305ab3e97254ede6');\n\n// Grantee list reference and history reference returned from initial list creation\nconst granteeListRef = new Reference('69da034fdae049eed9a22ec48b98a08ed5d363d48076f88c44ffe3367a18e306cae6aaf1cfce72d59262b9fb9293e15469c01c6a2626bb62478116cc98fb303b')\nconst granteeHistoryRef = new Reference('18d6f58a1d3c8253a5fc47023d49e9011236ead43724e595e898e1b422b77b19')\n\n// Your postage batch ID (replace with a valid one)\nconst postageBatchId = new BatchId('0258a225fe8da54cc6537eb8b12fcf6706c7873dbe19b9381d31729aa0405398');\n\n// Function to update the grantee list by adding the new public key\nasync function updateGranteeList() {\n  try {\n    // Call the patchGrantees function to add the new public key\n    const response = await bee.patchGrantees(postageBatchId, granteeListRef, granteeHistoryRef, {\n            add: [grantee1, grantee2], // Add the new grantee\n            revoke: [],\n    });\n\n    // Log the updated grantee list references\n    console.log('Grantee List Updated Successfully:');\n    console.log('Updated Reference:', response.ref.toHex());\n    console.log('Updated History Reference:', response.historyref.toHex());\n  } catch (error) {\n    console.error('Error updating grantee list:', error.message);\n    if (error.response) {\n      // If there's an error, log the full response for more details\n      console.error('Response Status:', error.response.status);\n      console.error('Response Body:', JSON.stringify(error.response.body, null, 2));\n    }\n  }\n}\n\n// Call the function to update the grantee list\nupdateGranteeList();\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"Grantee List Updated Successfully:\nUpdated Reference: a029324c42e7911032b83155f487d545b6e07b521a90fce90a266f308c0a455417e71bc03621868da2f6e84357ba772cb03b408fce79862b03d2e082004eccd8\nUpdated History Reference: d904f0790acb7edfda6a078176d64ec026b40298bfdbceb82956533e31489fcd\n"})}),"\n",(0,r.jsx)(n.h2,{id:"get-grantees-list",children:"Get Grantees List"}),"\n",(0,r.jsxs)(n.p,{children:["In order to view the members of our grantees list we need to use the 64 byte ",(0,r.jsx)(n.code,{children:"ref"})," returned when we create or update a list. We will view both our original list and the updated list based on the original list using the respective ",(0,r.jsx)(n.code,{children:"ref"})," from each list:"]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["The grantee list is encrypted, and only the owner can view the grantee list, make sure to use the owner node when using the ",(0,r.jsx)(n.code,{children:"bee.getGrantees()"})," method."]})}),"\n",(0,r.jsx)(n.h4,{id:"example-script-2",children:"Example Script:"}),"\n",(0,r.jsx)(n.p,{children:"The example script below performs the following operations:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Initializes a Bee client."}),"\n",(0,r.jsxs)(n.li,{children:["Defines two existing grantee list 64 byte ",(0,r.jsx)(n.code,{children:"ref"})," copied from the results of our previous example scripts."]}),"\n",(0,r.jsxs)(n.li,{children:["Calls ",(0,r.jsx)(n.code,{children:"bee.getGrantees()"})," for each ",(0,r.jsx)(n.code,{children:"ref"})," to retrieve the corresponding grantee list."]}),"\n",(0,r.jsx)(n.li,{children:"Logs the status, status text, and list of grantee public keys in compressed hex format."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Bee, Reference } from '@ethersphere/bee-js';\n\n// Initialize Bee instance \nconst bee = new Bee('http://localhost:1633');\n\n\n// Grantee list references (the reference returned from the `bee.createGrantees()` function)\nconst granteeListRef_01 = new Reference('69da034fdae049eed9a22ec48b98a08ed5d363d48076f88c44ffe3367a18e306cae6aaf1cfce72d59262b9fb9293e15469c01c6a2626bb62478116cc98fb303b');\nconst granteeListRef_02 = new Reference('a029324c42e7911032b83155f487d545b6e07b521a90fce90a266f308c0a455417e71bc03621868da2f6e84357ba772cb03b408fce79862b03d2e082004eccd8');\n\n// Function to get the grantee list\nasync function getGranteeList(granteeListRef) {\n  try {\n    // Call the getGrantees function with the reference\n    const result = await bee.getGrantees(granteeListRef);\n\n    // Log the full response\n    console.log('Grantee List Retrieved:');\n    console.log('Status:', result.status);\n    console.log('Status Text:', result.statusText);\n\n    // Log the grantee lists as arrays of their hex string representations \n    console.log('Grantees:', result.grantees.map(grantee => grantee.toCompressedHex()));\n\n  } catch (error) {\n    console.error('Error retrieving grantee list:', error);\n  }\n}\n\n// Call the function to fetch the grantee list\ngetGranteeList(granteeListRef_01);\ngetGranteeList(granteeListRef_02);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"Grantee List Retrieved:\nStatus: 200\nStatus Text: OK\nGrantees: [\n  '027d0c4759f689ea3dd3eb79222870671c492cb99f3fade275bcbf0ea39cd0ef6e'\n]\nGrantee List Retrieved:\nStatus: 200\nStatus Text: OK\nGrantees: [\n  '027d0c4759f689ea3dd3eb79222870671c492cb99f3fade275bcbf0ea39cd0ef6e',\n  '03636056d1e08f100c5acaf14d10070102de9444c97b2e8215305ab3e97254ede6'\n]\n"})}),"\n",(0,r.jsx)(n.p,{children:"The first list of grantees contains the first public key we gave access to when we created the list, while the second one contains both the first and the second one we added when we created our second list based on the first one."}),"\n",(0,r.jsx)(n.h2,{id:"upload-with-act",children:"Upload With ACT"}),"\n",(0,r.jsx)(n.p,{children:"We can upload our content with either of the two lists we created depending on which set of users we wish to give access too. In the example below, we use both lists."}),"\n",(0,r.jsx)(n.h4,{id:"example-script-3",children:"Example Script:"}),"\n",(0,r.jsx)(n.p,{children:"The example script below performs the following operations:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Initializes a Bee client."}),"\n",(0,r.jsxs)(n.li,{children:["Defines a postage batch ID and two ACT grantee list 32 byte ",(0,r.jsx)(n.code,{children:"historyref"})," hashes returned from the operations in the previous examples."]}),"\n",(0,r.jsx)(n.li,{children:"Defines a string to upload as a sample file."}),"\n",(0,r.jsxs)(n.li,{children:["Calls ",(0,r.jsx)(n.code,{children:"bee.uploadFile()"})," twice with ACT enabled, specifying a ",(0,r.jsx)(n.code,{children:"historyRef"})," each time to enforce access control."]}),"\n",(0,r.jsx)(n.li,{children:"Logs the resulting Swarm reference and history reference after each upload."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Bee, BatchId, Reference } from '@ethersphere/bee-js';\n\n// Initialize Bee instance\nconst bee = new Bee('http://localhost:1633');\n\n// Your postage batch ID (replace with a valid one)\nconst postageBatchId = new BatchId('0258a225fe8da54cc6537eb8b12fcf6706c7873dbe19b9381d31729aa0405398');\n\n// Grantee list reference (the reference returned from the `bee.createGrantees()` function)\nconst historyRef_01 = new Reference('18d6f58a1d3c8253a5fc47023d49e9011236ead43724e595e898e1b422b77b19');\nconst historyRef_02 = new Reference('d904f0790acb7edfda6a078176d64ec026b40298bfdbceb82956533e31489fcd');\n\n// Sample data to upload\nconst fileData = 'This is a sample string that will be uploaded securely using ACT.';\n\n\nasync function uploadWithACT(historyRef) {\n  try {\n    // Upload the string with ACT enabled\n    const result = await bee.uploadFile(postageBatchId, fileData, 'samplefile.txt', {\n        act: true, // Enable ACT for the uploaded data\n        actHistoryAddress: historyRef, // Provide the grantee list reference for ACT\n      contentType: 'text/plain',\n    });\n\n    console.log('File uploaded successfully with ACT:');\n    console.log('Reference:', result.reference.toHex());\n    console.log(\"History reference\")\n    console.log(result.historyAddress.value.toHex())\n  } catch (error) {\n    console.error('Error uploading file with ACT:', error);\n  }\n}\n\n// Call the function to upload the file with each `historyref`\nuploadWithACT(historyRef_01);\nuploadWithACT(historyRef_02);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"File uploaded successfully with ACT:\nReference: e227acea84e1d55e90baa93a698e79577a5b1c54513925b61476386798b41728\nHistory reference\n18d6f58a1d3c8253a5fc47023d49e9011236ead43724e595e898e1b422b77b19\nFile uploaded successfully with ACT:\nReference: e227acea84e1d55e90baa93a698e79577a5b1c54513925b61476386798b41728\nHistory reference\nd904f0790acb7edfda6a078176d64ec026b40298bfdbceb82956533e31489fcd\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The reference hash is the same for each upload since the content is the same. The reference hash along with a ",(0,r.jsx)(n.code,{children:"historyref"})," and the uploader's public key are required in order to access the content uploaded with ACT."]}),"\n",(0,r.jsxs)(n.p,{children:["You can choose which ",(0,r.jsx)(n.code,{children:"historyref"})," to share depending on which set of public keys you wish to authorize to download the content."]}),"\n",(0,r.jsx)(n.h2,{id:"download-with-act",children:"Download With ACT"}),"\n",(0,r.jsx)(n.p,{children:"In order to download using ACT, we must pass in the public key from the grantee list creator along with the file reference and history reference returned from the file upload operation:"}),"\n",(0,r.jsx)(n.h4,{id:"example-script-4",children:"Example Script:"}),"\n",(0,r.jsx)(n.p,{children:"The example script below performs the following operations:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Initializes a Bee client."}),"\n",(0,r.jsx)(n.li,{children:"Defines a publisher public key and associated file reference + history references for ACT-protected content using the references returned from the upload operation."}),"\n",(0,r.jsxs)(n.li,{children:["Calls ",(0,r.jsx)(n.code,{children:"bee.downloadFile()"})," with ACT options (",(0,r.jsx)(n.code,{children:"actPublisher"})," and ",(0,r.jsx)(n.code,{children:"actHistoryAddress"}),") to access protected data."]}),"\n",(0,r.jsx)(n.li,{children:"Logs the decoded file content."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Bee, Reference, PublicKey } from '@ethersphere/bee-js'\n\n// Initialize Bee instance\nconst bee = new Bee('http://localhost:1633')\n\n\n// Publisher public key used during upload\nconst publisherPublicKey = new PublicKey('0295562f9c1013d1db29f7aaa0c997c4bb3f1fc053bd0ed49a3d98584490cc8f96');\n\n// File reference and history reference returned from upload operation\nconst fileRef_01 = new Reference('e227acea84e1d55e90baa93a698e79577a5b1c54513925b61476386798b41728');\nconst historyRef_01 = new Reference('18d6f58a1d3c8253a5fc47023d49e9011236ead43724e595e898e1b422b77b19');\n\n\n// Function to download ACT-protected content\nasync function downloadWithACT(fileRef, historyRef, publisherPubKey) {\n  try {\n    const result = await bee.downloadFile(fileRef, './', {\n        actPublisher: publisherPubKey,\n        actHistoryAddress: historyRef\n    })\n\n    console.log('Content:', result.data.toUtf8())\n  } catch (error) {\n    console.error(`Error downloading from reference ${fileRef}:`, error)\n  }\n}\n\ndownloadWithACT(\n  fileRef_01,\n  historyRef_01,\n  publisherPublicKey\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example terminal output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"Content: This is a sample string that will be uploaded securely using ACT.\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the example above, we used the history reference from the file uploaded using the grantees list with only one public key included (",(0,r.jsx)(n.code,{children:"027d0c4759f689ea3dd3eb79222870671c492cb99f3fade275bcbf0ea39cd0ef6e"}),"), and so it will only be able to be retrieved and decrypted by the node with that public key."]}),"\n",(0,r.jsx)(n.p,{children:"If any other node attempts to download this content then a 404 error will be returned."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);