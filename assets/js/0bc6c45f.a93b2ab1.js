"use strict";(self.webpackChunkbee_js_docs=self.webpackChunkbee_js_docs||[]).push([[8962],{1115:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"documentation/utilities","title":"Utility Classes","description":"bee-js includes a variety of utility classes with methods for working with different data types, keys, signatures, addresses, token values, content references, hashing, and more.","source":"@site/docs/documentation/utilities.md","sourceDirName":"documentation","slug":"/utilities","permalink":"/docs/utilities","draft":false,"unlisted":false,"editUrl":"https://github.com/ethersphere/bee-js-docs/docs/documentation/utilities.md","tags":[],"version":"current","frontMatter":{"title":"Utility Classes","id":"utilities","slug":"/utilities","sidebar_label":"Utility Classes"},"sidebar":"Balls","previous":{"title":"ACT","permalink":"/docs/act"},"next":{"title":"Community","permalink":"/docs/resources/community"}}');var i=s(4848),a=s(8453);const r={title:"Utility Classes",id:"utilities",slug:"/utilities",sidebar_label:"Utility Classes"},c=void 0,o={},l=[{value:"<em>Bytes</em> - Data Conversions &amp; Manipulation",id:"bytes---data-conversions--manipulation",level:2},{value:"Hashing with <code>keccak256</code>",id:"hashing-with-keccak256",level:3},{value:"Creating <em>Bytes</em> Instances",id:"creating-bytes-instances",level:3},{value:"Accessing and Converting Bytes",id:"accessing-and-converting-bytes",level:3},{value:"<em>PrivateKey</em> - Key Management &amp; Signing",id:"privatekey---key-management--signing",level:2},{value:"<em>BZZ</em> and <em>DAI</em> - Token Conversions &amp; Formatting",id:"bzz-and-dai---token-conversions--formatting",level:2},{value:"<em>Reference</em> - Reference Hashes and CIDs",id:"reference---reference-hashes-and-cids",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"bee-js"})," includes a variety of utility classes with methods for working with different data types, keys, signatures, addresses, token values, content references, hashing, and more."]}),"\n",(0,i.jsxs)(n.h2,{id:"bytes---data-conversions--manipulation",children:[(0,i.jsx)(n.em,{children:"Bytes"})," - Data Conversions & Manipulation"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Bytes"})," class in ",(0,i.jsx)(n.code,{children:"bee-js"})," provides a convenient wrapper for manipulating byte arrays, converting between encodings, slicing, hashing, and more. It\u2019s used throughout ",(0,i.jsx)(n.code,{children:"bee-js"})," as the basis for other utility classes like ",(0,i.jsx)(n.code,{children:"Signature"}),", ",(0,i.jsx)(n.code,{children:"Reference"}),", ",(0,i.jsx)(n.code,{children:"PrivateKey"}),", and more, all of which extend the ",(0,i.jsx)(n.code,{children:"Bytes"})," class."]}),"\n",(0,i.jsxs)(n.p,{children:["It is also a ",(0,i.jsx)(n.strong,{children:"core data type"})," used throughout the SDK as expected input/returned data type for various methods."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Import Bytes class\nimport { Bytes } from '@ethersphere/bee-js'\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"hashing-with-keccak256",children:["Hashing with ",(0,i.jsx)(n.code,{children:"keccak256"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Bytes.fromUtf8()"}),": Converts a UTF-8 string to a ",(0,i.jsx)(n.code,{children:"Bytes"})," instance."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Bytes.keccak256()"}),": Computes the keccak256 hash of the given byte input."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toHex()"}),": Converts the byte data to a hexadecimal string."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// --- Hashing with keccak256 ---\nconsole.log('--- keccak256 Hashing ---')\nconsole.log('Empty string hash:', Bytes.keccak256(Bytes.fromUtf8('')).toHex())\nconsole.log('Hello, world! hash:', Bytes.keccak256(Bytes.fromUtf8('Hello, world!')).toHex())\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--- keccak256 Hashing ---\nEmpty string hash: c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\nHello, world! hash: b6e16d27ac5ab427a7f68900ac5559ce272dc6c37c82b3e052246c82244c50e4\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"creating-bytes-instances",children:["Creating ",(0,i.jsx)(n.em,{children:"Bytes"})," Instances"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Bytes.fromUtf8()"}),": Creates a ",(0,i.jsx)(n.code,{children:"Bytes"})," instance from a UTF-8 string."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Bytes.fromSlice()"}),": Creates a ",(0,i.jsx)(n.code,{children:"Bytes"})," instance from a slice of a ",(0,i.jsx)(n.code,{children:"Uint8Array"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"new Bytes(...)"}),": Constructs a new ",(0,i.jsx)(n.code,{children:"Bytes"})," instance from various inputs like strings, ",(0,i.jsx)(n.code,{children:"ArrayBuffer"}),", or ",(0,i.jsx)(n.code,{children:"Uint8Array"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toHex()"}),": Converts the byte data to a hexadecimal string."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// --- Creating Bytes instances ---\nconsole.log('\\n--- Creating Bytes Instances ---')\n\nconst bytesFromString = Bytes.fromUtf8('Swarm')\nconsole.log('From UTF-8 string:', bytesFromString.toHex())\n\nconst source = new Uint8Array([1, 2, 3, 4, 5])\nconst slice = Bytes.fromSlice(source, 1, 3)\nconsole.log('From slice of Uint8Array:', slice.toHex())\n\nconst fromHex = new Bytes('0xdeadbeef')\nconsole.log('From hex string:', fromHex.toHex())\n\nconst cloned = new Bytes(fromHex)\nconsole.log('Cloned Bytes instance:', cloned.toHex())\n\nconst fromArray = new Bytes(new Uint8Array([16, 32, 48]))\nconsole.log('From raw Uint8Array:', fromArray.toHex())\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--- Creating Bytes Instances ---\nFrom UTF-8 string: 537761726d\nFrom slice of Uint8Array: 020304\nFrom hex string: deadbeef\nCloned Bytes instance: deadbeef\nFrom raw Uint8Array: 102030\n"})}),"\n",(0,i.jsx)(n.h3,{id:"accessing-and-converting-bytes",children:"Accessing and Converting Bytes"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toUint8Array()"}),": Converts the ",(0,i.jsx)(n.code,{children:"Bytes"})," instance to a ",(0,i.jsx)(n.code,{children:"Uint8Array"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toHex()"}),": Converts the byte data to a hexadecimal string."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toBase64()"}),": Converts the byte data to a Base64-encoded string."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toBase32()"}),": Converts the byte data to a Base32-encoded string."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toUtf8()"}),": Converts the byte data to a UTF-8 string."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toString()"}),": Converts the byte data to a hexadecimal string (alias for ",(0,i.jsx)(n.code,{children:"toHex()"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"toJSON()"}),": Parses the byte data (assumed to be a JSON string) and returns the corresponding JavaScript object."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// --- Accessing and Converting Bytes ---\nconsole.log('\\n--- Accessing and Converting Bytes ---')\n\nconst data = Bytes.fromUtf8('hello')\n\nconsole.log('toUint8Array():', data.toUint8Array())\nconsole.log('toHex():', data.toHex())\nconsole.log('toBase64():', data.toBase64())\nconsole.log('toBase32():', data.toBase32())\nconsole.log('toUtf8():', data.toUtf8())\nconsole.log('toString():', data.toString())\n\nconst json = Bytes.fromUtf8('{\"a\": 1, \"b\": true}')\nconsole.log('toJSON():', json.toJSON())\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--- Accessing and Converting Bytes ---\ntoUint8Array(): Uint8Array(5) [ 104, 101, 108, 108, 111 ]\ntoHex(): 68656c6c6f\ntoBase64(): aGVsbG8=\ntoBase32(): NBSWY3DP\ntoUtf8(): hello\ntoString(): 68656c6c6f\ntoJSON(): { a: 1, b: true }\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"privatekey---key-management--signing",children:[(0,i.jsx)(n.em,{children:"PrivateKey"})," - Key Management & Signing"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"PrivateKey"})," class extends the ",(0,i.jsx)(n.code,{children:"Bytes"})," class. It is initialized with an Ethereum-style private key, which can then be used for signing arbitrary messages. It also has methods for returning the derived Ethereum address and public key."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { PrivateKey } from '@ethersphere/bee-js'\n\n// This example shows interoperability of crypto types\n\n// Initialize PrivateKey with 32-byte hexadecimal private key\nconst signer = new PrivateKey('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\nconsole.log('PrivateKey initialized:', signer.toHex())\n\n// Message to be signed\nconst message = 'Hello world!'\nconsole.log('Message to sign:', message)\n\n// Message signing\nconst signature = signer.sign(message) // type Signature\nconsole.log('Generated signature:', signature.toHex())\n\n// Public key derivation\nconst recovered = signature.recoverPublicKey(message) // type PublicKey\nconsole.log('Recovered public key:', recovered.toHex())\n\n// Ethereum account address derivation\nconst address = recovered.address() // type EthAddress\nconsole.log('Recovered Ethereum address:', address.toHex())\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"PrivateKey initialized: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\nMessage to sign: Hello world!\nGenerated signature: 0f0b277880c01e1ed39ad3fadcbd1d317c89ed4ecc9048072a18b370eff3162f5519fa0fa307ed66bac9645bf6e1e5350b3e91a99bcf7104ecfcb6d8443b81301c\nRecovered public key: 4646ae5047316b4230d0086c8acec687f00b1cd9d1dc634f6cb358ac0a9a8ffffe77b4dd0a4bfb95851f3b7355c781dd60f8418fc8a65d14907aff47c903a559\nRecovered Ethereum address: fcad0b19bb29d4674531d6f115237e16afce377c\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"bzz-and-dai---token-conversions--formatting",children:[(0,i.jsx)(n.em,{children:"BZZ"})," and ",(0,i.jsx)(n.em,{children:"DAI"})," - Token Conversions & Formatting"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { BZZ, DAI } from '@ethersphere/bee-js'\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Initializing and formatting BZZ and DAI tokens."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// --- BZZ Initialization ---\nconsole.log('--- BZZ Initialization ---')\nconst bzz = BZZ.fromDecimalString('13.37')\nconsole.log('BZZ in PLUR String:', bzz.toPLURString())\nconsole.log('BZZ as PLUR BigInt:', bzz.toPLURBigInt())\nconsole.log('BZZ in Decimal String:', bzz.toDecimalString())\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--- BZZ Initialization ---\nBZZ in PLUR String: 133700000000000000\nBZZ as PLUR BigInt: 133700000000000000n\nBZZ in Decimal String: 13.3700000000000000\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"DAI token initialization, converting from Wei to Decimal string and back."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// --- DAI Initialization ---\nconsole.log('--- DAI Initialization ---')\nconst daiFromWei = DAI.fromWei('4596417133719887384')\nconsole.log('DAI from Wei to Decimal String:', daiFromWei.toDecimalString())\nconsole.log('DAI from Decimal String to Wei BigInt:', DAI.fromDecimalString('4.596417133719887384').toWeiBigInt())\nconsole.log('DAI from Decimal String to Wei String:', DAI.fromDecimalString('4.596417133719887384').toWeiString())\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--- DAI Initialization ---\nDAI from Wei to Decimal String: 4.596417133719887384\nDAI from Decimal String to Wei BigInt: 4596417133719887384n\nDAI from Decimal String to Wei String: 4596417133719887384\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Performing arithmetic on BZZ tokens by sending and receiving amounts."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// --- BZZ Arithmetic ---\nconsole.log('--- BZZ Arithmetic ---')\nconst sent = BZZ.fromDecimalString('1.89')\nconst received = BZZ.fromDecimalString('45.600000061124')\nconsole.log('BZZ after arithmetic (sent + received):', sent.plus('401100000000000000').minus(received).toDecimalString())\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--- BZZ Arithmetic ---\nBZZ after arithmetic (sent + received): -3.6000000611240000\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Converting BZZ tokens to DAI tokens using a specified exchange rate."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// --- Convert BZZ to DAI ---\nconsole.log('--- Convert BZZ to DAI ---')\nconst exchangeRate = DAI.fromDecimalString('0.3659')\nconst bzzForExchange = BZZ.fromDecimalString('1000')\nconsole.log('BZZ exchanged to DAI at rate 0.3659:', bzzForExchange.exchangeToDAI(exchangeRate).toDecimalString())\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--- Convert BZZ to DAI ---\nBZZ exchanged to DAI at rate 0.3659: 365.900000000000000000\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Converting DAI tokens to BZZ tokens using the same exchange rate."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// --- Convert DAI to BZZ ---\nconsole.log('--- Convert DAI to BZZ ---')\nconst dai = DAI.fromDecimalString('2.591923154542010243')\nconsole.log('DAI exchanged to BZZ at rate 0.3659:', dai.exchangeToBZZ(exchangeRate).toDecimalString())\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--- Convert DAI to BZZ ---\nDAI exchanged to BZZ at rate 0.3659: 7.0836926880076803\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"reference---reference-hashes-and-cids",children:[(0,i.jsx)(n.em,{children:"Reference"})," - Reference Hashes and CIDs"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Reference"})," class is used to represent content reference hashes and CIDs, and conversions between them."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { Reference } from '@ethersphere/bee-js'\n\nconst hash = '44ef8a919a7a2a6fe36712d4512047db406cc7ac5c06da7731e0cb87bab10ff9'\nconst cid = 'bah5acgzaitxyvem2pivg7y3hclkfcich3nagzr5mlqdnu5zr4dfypovrb74q'\n\n// Convert CID to hash (Hex)\nconsole.log('CID to Hash (Hex):', new Reference(cid).toHex())\n\n// Convert Hash (Hex) to CID (Accepts 'manifest' or 'feed' types)\nconsole.log('Hash to CID (manifest type):', new Reference(hash).toCid('manifest'))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"CID to Hash (Hex): 44ef8a919a7a2a6fe36712d4512047db406cc7ac5c06da7731e0cb87bab10ff9\nHash to CID (manifest type): bah5acgzaitxyvem2pivg7y3hclkfcich3nagzr5mlqdnu5zr4dfypovrb74q\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var t=s(6540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);