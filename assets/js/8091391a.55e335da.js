"use strict";(self.webpackChunkbee_js_docs=self.webpackChunkbee_js_docs||[]).push([[3947],{4357:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"api/namespaces/Utils/approximateOverheadForRedundancyLevel","title":"Function: approximateOverheadForRedundancyLevel()","description":"approximateOverheadForRedundancyLevel(chunks, level, encrypted): number","source":"@site/docs/api/namespaces/Utils/approximateOverheadForRedundancyLevel.md","sourceDirName":"api/namespaces/Utils","slug":"/api/namespaces/Utils/approximateOverheadForRedundancyLevel","permalink":"/docs/api/namespaces/Utils/approximateOverheadForRedundancyLevel","draft":false,"unlisted":false,"editUrl":"https://github.com/ethersphere/bee-js-docs/docs/api/namespaces/Utils/approximateOverheadForRedundancyLevel.md","tags":[],"version":"current","frontMatter":{},"sidebar":"Balls","previous":{"title":"Overview","permalink":"/docs/api/"},"next":{"title":"Function: getAmountForDuration()","permalink":"/docs/api/namespaces/Utils/getAmountForDuration"}}');var a=r(4848),s=r(8453);const d={},c="Function: approximateOverheadForRedundancyLevel()",o={},i=[{value:"Parameters",id:"parameters",level:2},{value:"chunks",id:"chunks",level:3},{value:"level",id:"level",level:3},{value:"encrypted",id:"encrypted",level:3},{value:"Returns",id:"returns",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"function-approximateoverheadforredundancylevel",children:"Function: approximateOverheadForRedundancyLevel()"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"approximateOverheadForRedundancyLevel"}),"(",(0,a.jsx)(n.code,{children:"chunks"}),", ",(0,a.jsx)(n.code,{children:"level"}),", ",(0,a.jsx)(n.code,{children:"encrypted"}),"): ",(0,a.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Defined in: ",(0,a.jsx)(n.a,{href:"https://github.com/ethersphere/bee-js/blob/3abbe2b1b264d6b586511a56e93badb2236bd09d/src/utils/redundancy.ts#L48",children:"bee-js/src/utils/redundancy.ts:48"})]}),"\n",(0,a.jsx)(n.p,{children:"Returns an approximate multiplier for the overhead of a given redundancy level.\nRedundancy level is a tradeoff between storage overhead and fault tolerance.\nUse this number to estimate the amount of chunks that will be stored for a given\nredundancy level."}),"\n",(0,a.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(n.h3,{id:"chunks",children:"chunks"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"number"})}),"\n",(0,a.jsx)(n.h3,{id:"level",children:"level"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"/docs/api/enumerations/RedundancyLevel",children:(0,a.jsx)(n.code,{children:"RedundancyLevel"})})}),"\n",(0,a.jsx)(n.h3,{id:"encrypted",children:"encrypted"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"boolean"})}),"\n",(0,a.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"number"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>c});var t=r(6540);const a={},s=t.createContext(a);function d(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);