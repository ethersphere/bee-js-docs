"use strict";(self.webpackChunkbee_js_docs=self.webpackChunkbee_js_docs||[]).push([[900],{6192:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"documentation/status","title":"Checking Node Status","description":"To understand and monitor the status of your Bee node, bee-js provides a set of helpful methods. In this guide, we\'ll walk through how to retrieve and log the data needed to give a complete overview of your node\'s current status.","source":"@site/docs/documentation/status.md","sourceDirName":"documentation","slug":"/status","permalink":"/docs/status","draft":false,"unlisted":false,"editUrl":"https://github.com/ethersphere/bee-js-docs/docs/documentation/status.md","tags":[],"version":"current","frontMatter":{"title":"Checking Node Status","id":"status","slug":"/status","sidebar_label":"Checking Node Status"},"sidebar":"Balls","previous":{"title":"SDK Overview","permalink":"/docs/overview"},"next":{"title":"Chequebook Management","permalink":"/docs/chequebook"}}');var o=s(4848),a=s(8453);const c={title:"Checking Node Status",id:"status",slug:"/status",sidebar_label:"Checking Node Status"},i=void 0,r={},d=[{value:"Requirements",id:"requirements",level:3},{value:"1. Node Health and Readiness",id:"1-node-health-and-readiness",level:3},{value:"2. Get Node Topology",id:"2-get-node-topology",level:3},{value:"3. Get Node Addresses",id:"3-get-node-addresses",level:3},{value:"4. Get Version and API Compatibility",id:"4-get-version-and-api-compatibility",level:3},{value:"5. Get Node Info",id:"5-get-node-info",level:3},{value:"6. Get Chain State",id:"6-get-chain-state",level:3},{value:"7. Get Reserve State",id:"7-get-reserve-state",level:3},{value:"Run All Checks Together",id:"run-all-checks-together",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["To understand and monitor the status of your Bee node, ",(0,o.jsx)(n.code,{children:"bee-js"})," provides a set of helpful methods. In this guide, we'll walk through how to retrieve and log the data needed to give a complete overview of your node's current status."]}),"\n",(0,o.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,o.jsx)(n.p,{children:"To use the example scripts below, you need:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["An instance of the ",(0,o.jsx)(n.code,{children:"Bee"})," class from ",(0,o.jsx)(n.code,{children:"bee-js"})," ",(0,o.jsx)(n.a,{href:"/docs/getting-started/",children:"initialized"})," using the API endpoint of a currently operating Bee node."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"1-node-health-and-readiness",children:"1. Node Health and Readiness"}),"\n",(0,o.jsx)(n.p,{children:"Use this to access the health and readiness endpoint return values used for container orchestration tools like Kubernetes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function checkHealthAndReadiness() {\n  const health = await bee.getHealth()\n  const readiness = await bee.getReadiness()\n\n  console.log('Health:', health)\n  console.log('Readiness:', readiness)\n}\n\ncheckHealthAndReadiness()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"Health: { apiVersion: '7.3.0', version: '2.5.0-5ec231ba', status: 'ok' }\nReadiness: { apiVersion: '7.3.0', version: '2.5.0-5ec231ba', status: 'ready' }\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-get-node-topology",children:"2. Get Node Topology"}),"\n",(0,o.jsx)(n.p,{children:"Use this to inspect how many peers you're connected to, and the state of your neighborhood."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function checkTopology() {\n  const topology = await bee.getTopology()\n\n  console.log('Topology:', topology)\n}\n\ncheckTopology()\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Output: ",(0,o.jsxs)(n.em,{children:["(Bins 1 - 30 omitted from ",(0,o.jsx)(n.code,{children:"bins"})," result)"]})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"Topology: {\n  baseAddr: '1e2054bec3e681aeb0b365a1f9a574a03782176bd3ec0bcf810ebcaf551e4070',\n  population: 5619,\n  connected: 135,\n  timestamp: '2025-03-26T07:54:05.921263981Z',\n  nnLowWatermark: 3,\n  depth: 10,\n  reachability: 'Public',\n  networkAvailability: 'Available',\n  bins: {\n    bin_0: {\n      population: 2714,\n      connected: 16,\n      connectedPeers: [Array],\n      disconnectedPeers: [Array]\n    },\n    ...\n    bin_31: {\n      population: 0,\n      connected: 0,\n      connectedPeers: [],\n      disconnectedPeers: []\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-get-node-addresses",children:"3. Get Node Addresses"}),"\n",(0,o.jsx)(n.p,{children:"This will give you the overlay address, underlay addresses, and Ethereum address associated with your Bee node (the address is an Ethereum style address however it is for a Gnosis Chain account, not mainnet Ethereum)."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function checkAddresses() {\n  const addresses = await bee.getNodeAddresses()\n\n  console.log('Node Addresses:', addresses)\n}\n\ncheckAddresses()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"Node Addresses:\nOverlay: 1e2054bec3e681aeb0b365a1f9a574a03782176bd3ec0bcf810ebcaf551e4070\nEthereum: 9a73f283cd9211b96b5ec63f7a81a0ddc847cd93\nPublic Key: 7d0c4759f689ea3dd3eb79222870671c492cb99f3fade275bcbf0ea39cd0ef6e25edd43c99985983e49aa528f3f2b6711085354a31acb4e7b03559b02ec868f0\nPSS Public Key: 5ade58d20be7e04ee8f875eabeebf9c53375a8fc73917683155c7c0b572f47ef790daa3328f48482663954d12f6e4739f748572c1e86bfa89af99f17e7dd4d33\nUnderlay: [\n  '/ip4/127.0.0.1/tcp/1634/p2p/QmcpSJPHuuQYRgDkNfwziihVcpuVteoNxePvfzaJyp9z7j',\n  '/ip4/172.17.0.2/tcp/1634/p2p/QmcpSJPHuuQYRgDkNfwziihVcpuVteoNxePvfzaJyp9z7j',\n  '/ip6/::1/tcp/1634/p2p/QmcpSJPHuuQYRgDkNfwziihVcpuVteoNxePvfzaJyp9z7j'\n]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-get-version-and-api-compatibility",children:"4. Get Version and API Compatibility"}),"\n",(0,o.jsxs)(n.p,{children:["Use these methods to check your node's version number and the API version number, and to check whether the API version is supported by ",(0,o.jsx)(n.code,{children:"bee-js"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function checkVersions() {\n  const versions = await bee.getVersions()\n  const isSupported = await bee.isSupportedApiVersion()\n\n  console.log('Node Versions:', versions)\n  console.log('Is Supported API Version:', isSupported)\n}\n\ncheckVersions()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"Node Versions: {\n  supportedBeeVersion: '2.4.0-390a402e',\n  supportedBeeApiVersion: '7.2.0',\n  beeVersion: '2.5.0-5ec231ba',\n  beeApiVersion: '7.3.0'\n}\nIs Supported API Version: true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"5-get-node-info",children:"5. Get Node Info"}),"\n",(0,o.jsx)(n.p,{children:"This provides general information such as node mode (e.g., full, light), and whether chequebook and SWAP are enabled."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function getNodeInfo() {\n  const info = await bee.getNodeInfo()\n\n  console.log('Node Info:', info)\n}\n\ngetNodeInfo()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"Node Info: { beeMode: 'light', chequebookEnabled: true, swapEnabled: true } \n"})}),"\n",(0,o.jsx)(n.h3,{id:"6-get-chain-state",children:"6. Get Chain State"}),"\n",(0,o.jsx)(n.p,{children:"Shows blockchain-related info such as the current price for storage."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function getChainState() {\n  const state = await bee.getChainState()\n\n  console.log('Chain State:', state)\n}\n\ngetChainState()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"Chain State: {\n  block: 39230575,\n  chainTip: 39230580,\n  totalAmount: '204168626286',\n  currentPrice: 41699\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"7-get-reserve-state",children:"7. Get Reserve State"}),"\n",(0,o.jsx)(n.p,{children:"This tells you about your node\u2019s local reserve size and storage metrics."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { Bee } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function getReserveState() {\n  const reserveState = await bee.getReserveState()\n\n  console.log('Reserve State:', reserveState)\n}\n\ngetReserveState()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"Reserve State: { commitment: 17360879616, radius: 13, storageRadius: 0 }\n"})}),"\n",(0,o.jsx)(n.h3,{id:"run-all-checks-together",children:"Run All Checks Together"}),"\n",(0,o.jsx)(n.p,{children:"You can combine all of the above into one function to quickly inspect the full status of your node:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { Bee, Bytes } from '@ethersphere/bee-js'\n\nconst bee = new Bee('http://localhost:1633')\n\nasync function checkHealthAndReadiness() {\n  const health = await bee.getHealth()\n  const readiness = await bee.getReadiness()\n\n  console.log('Health:', health)\n  console.log('Readiness:', readiness)\n}\n\nasync function checkTopology() {\n  const topology = await bee.getTopology()\n\n  console.log('Topology:', topology)\n}\n\nasync function checkAddresses() {\n  const addresses = await bee.getNodeAddresses()\n\n  console.log('Node Addresses:')\n  console.log('Overlay:', new Bytes(addresses.overlay.bytes).toHex())\n  console.log('Ethereum:', new Bytes(addresses.ethereum.bytes).toHex())\n  console.log('Public Key:', new Bytes(addresses.publicKey.bytes).toHex())\n  console.log('PSS Public Key:', new Bytes(addresses.pssPublicKey.bytes).toHex())\n  console.log('Underlay:', addresses.underlay)\n}\n\nasync function checkVersions() {\n  const versions = await bee.getVersions()\n  const isSupported = await bee.isSupportedApiVersion()\n\n  console.log('Node Versions:', versions)\n  console.log('Is Supported API Version:', isSupported)\n}\n\nasync function getNodeInfo() {\n  const info = await bee.getNodeInfo()\n\n  console.log('Node Info:', info)\n}\n\nasync function getChainState() {\n  const state = await bee.getChainState()\n\n  console.log('Chain State:', state)\n}\n\nasync function getReserveState() {\n  const reserveState = await bee.getReserveState()\n\n  console.log('Reserve State:', reserveState)\n}\n\nasync function checkNodeStatus() {\n  console.log('\\n\\n=== Node Health and Readiness ===')\n  await checkHealthAndReadiness()\n\n  console.log('\\n\\n=== Node Topology ===')\n  await checkTopology()\n\n  console.log('\\n\\n=== Node Addresses ===')\n  await checkAddresses()\n\n  console.log('\\n\\n=== Version and API Compatibility ===')\n  await checkVersions()\n\n  console.log('\\n\\n=== Node Info ===')\n  await getNodeInfo()\n\n  console.log('\\n\\n=== Chain State ===')\n  await getChainState()\n\n  console.log('\\n\\n=== Reserve State ===')\n  await getReserveState()\n}\n\ncheckNodeStatus()\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>i});var t=s(6540);const o={},a=t.createContext(o);function c(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);