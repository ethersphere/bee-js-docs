"use strict";(self.webpackChunkbee_js_docs=self.webpackChunkbee_js_docs||[]).push([[962],{1803:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(8168),r=(t(6540),t(5680));const i={title:"Utility Classes",id:"utilities",slug:"/utilities",sidebar_label:"Utility Classes"},o=void 0,s={unversionedId:"documentation/utilities",id:"documentation/utilities",title:"Utility Classes",description:"bee-js includes a variety of utility classes with methods for working with different data types, keys, signatures, addresses, token values, content references, hashing, and more.",source:"@site/docs/documentation/utilities.md",sourceDirName:"documentation",slug:"/utilities",permalink:"/docs/utilities",draft:!1,editUrl:"https://github.com/ethersphere/bee-js-docs/docs/documentation/utilities.md",tags:[],version:"current",frontMatter:{title:"Utility Classes",id:"utilities",slug:"/utilities",sidebar_label:"Utility Classes"},sidebar:"Balls",previous:{title:"Upload and Download",permalink:"/docs/upload-download"},next:{title:"Community",permalink:"/docs/resources/community"}},l={},c=[{value:"<em>Bytes</em> - Data Conversions &amp; Manipulation",id:"bytes---data-conversions--manipulation",level:2},{value:"Hashing with <code>keccak256</code>",id:"hashing-with-keccak256",level:3},{value:"Creating <em>Bytes</em> Instances",id:"creating-bytes-instances",level:3},{value:"Accessing and Converting Bytes",id:"accessing-and-converting-bytes",level:3},{value:"<em>PrivateKey</em> - Key Management &amp; Signing",id:"privatekey---key-management--signing",level:2},{value:"<em>BZZ</em> and <em>DAI</em> - Token Conversions &amp; Formatting",id:"bzz-and-dai---token-conversions--formatting",level:2},{value:"<em>Reference</em> - Reference Hashes and CIDs",id:"reference---reference-hashes-and-cids",level:2}],g={toc:c},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"bee-js")," includes a variety of utility classes with methods for working with different data types, keys, signatures, addresses, token values, content references, hashing, and more."),(0,r.yg)("h2",{id:"bytes---data-conversions--manipulation"},(0,r.yg)("em",{parentName:"h2"},"Bytes")," - Data Conversions & Manipulation"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Bytes")," class in ",(0,r.yg)("inlineCode",{parentName:"p"},"bee-js")," provides a convenient wrapper for manipulating byte arrays, converting between encodings, slicing, hashing, and more. It\u2019s used throughout ",(0,r.yg)("inlineCode",{parentName:"p"},"bee-js")," as the basis for other utility classes like ",(0,r.yg)("inlineCode",{parentName:"p"},"Signature"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Reference"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"PrivateKey"),", and more, all of which extend the ",(0,r.yg)("inlineCode",{parentName:"p"},"Bytes")," class."),(0,r.yg)("p",null,"It is also a ",(0,r.yg)("strong",{parentName:"p"},"core data type")," used throughout the SDK as expected input/returned data type for various methods."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"// Import Bytes class\nimport { Bytes } from '@ethersphere/bee-js'\n")),(0,r.yg)("h3",{id:"hashing-with-keccak256"},"Hashing with ",(0,r.yg)("inlineCode",{parentName:"h3"},"keccak256")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Methods:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Bytes.fromUtf8()"),": Converts a UTF-8 string to a ",(0,r.yg)("inlineCode",{parentName:"li"},"Bytes")," instance."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Bytes.keccak256()"),": Computes the keccak256 hash of the given byte input."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"toHex()"),": Converts the byte data to a hexadecimal string.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"// --- Hashing with keccak256 ---\nconsole.log('--- keccak256 Hashing ---')\nconsole.log('Empty string hash:', Bytes.keccak256(Bytes.fromUtf8('')).toHex())\nconsole.log('Hello, world! hash:', Bytes.keccak256(Bytes.fromUtf8('Hello, world!')).toHex())\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"--- keccak256 Hashing ---\nEmpty string hash: c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\nHello, world! hash: b6e16d27ac5ab427a7f68900ac5559ce272dc6c37c82b3e052246c82244c50e4\n")),(0,r.yg)("h3",{id:"creating-bytes-instances"},"Creating ",(0,r.yg)("em",{parentName:"h3"},"Bytes")," Instances"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Methods:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Bytes.fromUtf8()"),": Creates a ",(0,r.yg)("inlineCode",{parentName:"li"},"Bytes")," instance from a UTF-8 string."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Bytes.fromSlice()"),": Creates a ",(0,r.yg)("inlineCode",{parentName:"li"},"Bytes")," instance from a slice of a ",(0,r.yg)("inlineCode",{parentName:"li"},"Uint8Array"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"new Bytes(...)"),": Constructs a new ",(0,r.yg)("inlineCode",{parentName:"li"},"Bytes")," instance from various inputs like strings, ",(0,r.yg)("inlineCode",{parentName:"li"},"ArrayBuffer"),", or ",(0,r.yg)("inlineCode",{parentName:"li"},"Uint8Array"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"toHex()"),": Converts the byte data to a hexadecimal string.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"// --- Creating Bytes instances ---\nconsole.log('\\n--- Creating Bytes Instances ---')\n\nconst bytesFromString = Bytes.fromUtf8('Swarm')\nconsole.log('From UTF-8 string:', bytesFromString.toHex())\n\nconst source = new Uint8Array([1, 2, 3, 4, 5])\nconst slice = Bytes.fromSlice(source, 1, 3)\nconsole.log('From slice of Uint8Array:', slice.toHex())\n\nconst fromHex = new Bytes('0xdeadbeef')\nconsole.log('From hex string:', fromHex.toHex())\n\nconst cloned = new Bytes(fromHex)\nconsole.log('Cloned Bytes instance:', cloned.toHex())\n\nconst fromArray = new Bytes(new Uint8Array([16, 32, 48]))\nconsole.log('From raw Uint8Array:', fromArray.toHex())\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"--- Creating Bytes Instances ---\nFrom UTF-8 string: 537761726d\nFrom slice of Uint8Array: 020304\nFrom hex string: deadbeef\nCloned Bytes instance: deadbeef\nFrom raw Uint8Array: 102030\n")),(0,r.yg)("h3",{id:"accessing-and-converting-bytes"},"Accessing and Converting Bytes"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Methods:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"toUint8Array()"),": Converts the ",(0,r.yg)("inlineCode",{parentName:"li"},"Bytes")," instance to a ",(0,r.yg)("inlineCode",{parentName:"li"},"Uint8Array"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"toHex()"),": Converts the byte data to a hexadecimal string."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"toBase64()"),": Converts the byte data to a Base64-encoded string."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"toBase32()"),": Converts the byte data to a Base32-encoded string."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"toUtf8()"),": Converts the byte data to a UTF-8 string."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"toString()"),": Converts the byte data to a hexadecimal string (alias for ",(0,r.yg)("inlineCode",{parentName:"li"},"toHex()"),")."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"toJSON()"),": Parses the byte data (assumed to be a JSON string) and returns the corresponding JavaScript object.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"// --- Accessing and Converting Bytes ---\nconsole.log('\\n--- Accessing and Converting Bytes ---')\n\nconst data = Bytes.fromUtf8('hello')\n\nconsole.log('toUint8Array():', data.toUint8Array())\nconsole.log('toHex():', data.toHex())\nconsole.log('toBase64():', data.toBase64())\nconsole.log('toBase32():', data.toBase32())\nconsole.log('toUtf8():', data.toUtf8())\nconsole.log('toString():', data.toString())\n\nconst json = Bytes.fromUtf8('{\"a\": 1, \"b\": true}')\nconsole.log('toJSON():', json.toJSON())\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"--- Accessing and Converting Bytes ---\ntoUint8Array(): Uint8Array(5) [ 104, 101, 108, 108, 111 ]\ntoHex(): 68656c6c6f\ntoBase64(): aGVsbG8=\ntoBase32(): NBSWY3DP\ntoUtf8(): hello\ntoString(): 68656c6c6f\ntoJSON(): { a: 1, b: true }\n")),(0,r.yg)("h2",{id:"privatekey---key-management--signing"},(0,r.yg)("em",{parentName:"h2"},"PrivateKey")," - Key Management & Signing"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"PrivateKey")," class extends the ",(0,r.yg)("inlineCode",{parentName:"p"},"Bytes")," class. It is initialized with an Ethereum-style private key, which can then be used for signing arbitrary messages. It also has methods for returning the derived Ethereum address and public key."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"import { PrivateKey } from '@ethersphere/bee-js'\n\n// This example shows interoperability of crypto types\n\n// Initialize PrivateKey with 32-byte hexadecimal private key\nconst signer = new PrivateKey('0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef')\nconsole.log('PrivateKey initialized:', signer.toHex())\n\n// Message to be signed\nconst message = 'Hello world!'\nconsole.log('Message to sign:', message)\n\n// Message signing\nconst signature = signer.sign(message) // type Signature\nconsole.log('Generated signature:', signature.toHex())\n\n// Public key derivation\nconst recovered = signature.recoverPublicKey(message) // type PublicKey\nconsole.log('Recovered public key:', recovered.toHex())\n\n// Ethereum account address derivation\nconst address = recovered.address() // type EthAddress\nconsole.log('Recovered Ethereum address:', address.toHex())\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"PrivateKey initialized: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\nMessage to sign: Hello world!\nGenerated signature: 0f0b277880c01e1ed39ad3fadcbd1d317c89ed4ecc9048072a18b370eff3162f5519fa0fa307ed66bac9645bf6e1e5350b3e91a99bcf7104ecfcb6d8443b81301c\nRecovered public key: 4646ae5047316b4230d0086c8acec687f00b1cd9d1dc634f6cb358ac0a9a8ffffe77b4dd0a4bfb95851f3b7355c781dd60f8418fc8a65d14907aff47c903a559\nRecovered Ethereum address: fcad0b19bb29d4674531d6f115237e16afce377c\n")),(0,r.yg)("h2",{id:"bzz-and-dai---token-conversions--formatting"},(0,r.yg)("em",{parentName:"h2"},"BZZ")," and ",(0,r.yg)("em",{parentName:"h2"},"DAI")," - Token Conversions & Formatting"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"import { BZZ, DAI } from '@ethersphere/bee-js'\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Initializing and formatting BZZ and DAI tokens.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"// --- BZZ Initialization ---\nconsole.log('--- BZZ Initialization ---')\nconst bzz = BZZ.fromDecimalString('13.37')\nconsole.log('BZZ in PLUR String:', bzz.toPLURString())\nconsole.log('BZZ as PLUR BigInt:', bzz.toPLURBigInt())\nconsole.log('BZZ in Decimal String:', bzz.toDecimalString())\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"--- BZZ Initialization ---\nBZZ in PLUR String: 133700000000000000\nBZZ as PLUR BigInt: 133700000000000000n\nBZZ in Decimal String: 13.3700000000000000\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"DAI token initialization, converting from Wei to Decimal string and back.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"// --- DAI Initialization ---\nconsole.log('--- DAI Initialization ---')\nconst daiFromWei = DAI.fromWei('4596417133719887384')\nconsole.log('DAI from Wei to Decimal String:', daiFromWei.toDecimalString())\nconsole.log('DAI from Decimal String to Wei BigInt:', DAI.fromDecimalString('4.596417133719887384').toWeiBigInt())\nconsole.log('DAI from Decimal String to Wei String:', DAI.fromDecimalString('4.596417133719887384').toWeiString())\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"--- DAI Initialization ---\nDAI from Wei to Decimal String: 4.596417133719887384\nDAI from Decimal String to Wei BigInt: 4596417133719887384n\nDAI from Decimal String to Wei String: 4596417133719887384\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Performing arithmetic on BZZ tokens by sending and receiving amounts.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"// --- BZZ Arithmetic ---\nconsole.log('--- BZZ Arithmetic ---')\nconst sent = BZZ.fromDecimalString('1.89')\nconst received = BZZ.fromDecimalString('45.600000061124')\nconsole.log('BZZ after arithmetic (sent + received):', sent.plus('401100000000000000').minus(received).toDecimalString())\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"--- BZZ Arithmetic ---\nBZZ after arithmetic (sent + received): -3.6000000611240000\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Converting BZZ tokens to DAI tokens using a specified exchange rate.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"// --- Convert BZZ to DAI ---\nconsole.log('--- Convert BZZ to DAI ---')\nconst exchangeRate = DAI.fromDecimalString('0.3659')\nconst bzzForExchange = BZZ.fromDecimalString('1000')\nconsole.log('BZZ exchanged to DAI at rate 0.3659:', bzzForExchange.exchangeToDAI(exchangeRate).toDecimalString())\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"--- Convert BZZ to DAI ---\nBZZ exchanged to DAI at rate 0.3659: 365.900000000000000000\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Converting DAI tokens to BZZ tokens using the same exchange rate.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"// --- Convert DAI to BZZ ---\nconsole.log('--- Convert DAI to BZZ ---')\nconst dai = DAI.fromDecimalString('2.591923154542010243')\nconsole.log('DAI exchanged to BZZ at rate 0.3659:', dai.exchangeToBZZ(exchangeRate).toDecimalString())\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"--- Convert DAI to BZZ ---\nDAI exchanged to BZZ at rate 0.3659: 7.0836926880076803\n")),(0,r.yg)("h2",{id:"reference---reference-hashes-and-cids"},(0,r.yg)("em",{parentName:"h2"},"Reference")," - Reference Hashes and CIDs"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Reference")," class is used to represent content reference hashes and CIDs, and conversions between them."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"import { Reference } from '@ethersphere/bee-js'\n\nconst hash = '44ef8a919a7a2a6fe36712d4512047db406cc7ac5c06da7731e0cb87bab10ff9'\nconst cid = 'bah5acgzaitxyvem2pivg7y3hclkfcich3nagzr5mlqdnu5zr4dfypovrb74q'\n\n// Convert CID to hash (Hex)\nconsole.log('CID to Hash (Hex):', new Reference(cid).toHex())\n\n// Convert Hash (Hex) to CID (Accepts 'manifest' or 'feed' types)\nconsole.log('Hash to CID (manifest type):', new Reference(hash).toCid('manifest'))\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"CID to Hash (Hex): 44ef8a919a7a2a6fe36712d4512047db406cc7ac5c06da7731e0cb87bab10ff9\nHash to CID (manifest type): bah5acgzaitxyvem2pivg7y3hclkfcich3nagzr5mlqdnu5zr4dfypovrb74q\n")))}m.isMDXComponent=!0},5680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>p});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},g=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),d=c(t),y=r,p=d["".concat(l,".").concat(y)]||d[y]||m[y]||i;return t?a.createElement(p,o(o({ref:n},g),{},{components:t})):a.createElement(p,o({ref:n},g))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"}}]);